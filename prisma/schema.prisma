generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================
// ENUMS

enum HabitScoringType {
  LINEAR_POSITIVE_CAPPED
  LINEAR_NEGATIVE_CAPPED
  THRESHOLD_TARGET
  ONE_OFF_BONUS
}

enum HabitType {
  BOOLEAN
  NUMERIC
}

// =========================
// MODELS

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  createdAt       DateTime         @default(now())

  habits          Habit[]
  dailyLogs       DailyLog[]
  weeklyLogs      WeeklyLog[]
  weeklyScores    WeeklyScore[]
  modifiers       Modifier[]
  scoringSystems  ScoringSystem[]
}

model Habit {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  name            String
  description     String?
  habitType       HabitType        @default(BOOLEAN)
  createdAt       DateTime         @default(now())

  habitLogs       HabitLog[]
  scoringConfigs  ScoredHabit[]
}

model ScoringSystem {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  name            String
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())

  habits          ScoredHabit[]
  dailyLogs       DailyLog[]
  weeklyLogs      WeeklyLog[]
}

model ScoredHabit {
  id              String           @id @default(cuid())
  scoringSystemId String
  habitId         String

  scoringType     HabitScoringType
  weight          Int
  targetFrequency Int?

  scoringSystem   ScoringSystem    @relation(fields: [scoringSystemId], references: [id])
  habit           Habit            @relation(fields: [habitId], references: [id])

  @@unique([scoringSystemId, habitId])
}

model WeeklyLog {
  id               String         @id @default(cuid())
  userId           String
  user             User           @relation(fields: [userId], references: [id])

  // Store start of week (e.g., Monday) as date-only string; end date can be derived in code
  startDate        String         // 'YYYY-MM-DD'

  scoringSystemId  String
  scoringSystem    ScoringSystem  @relation(fields: [scoringSystemId], references: [id])

  dailyLogs        DailyLog[]     // all logs within this week
  weeklyScore      WeeklyScore?   // optional 1:1 summary for this week
  modifiers        Modifier[]     // adjustments applied to this week

  createdAt        DateTime       @default(now())

  @@unique([userId, startDate])
  @@index([startDate])
  @@map("Week") // legacy table rename if needed
}

model DailyLog {
  id               String         @id @default(cuid())
  userId           String
  weeklyLogId      String? // update this later back to required!
  scoringSystemId  String

  user             User           @relation(fields: [userId], references: [id])
  weeklyLog        WeeklyLog?     @relation(fields: [weeklyLogId], references: [id])
  scoringSystem    ScoringSystem  @relation(fields: [scoringSystemId], references: [id])

  date             String         // 'YYYY-MM-DD'
  notes            String?
  createdAt        DateTime       @default(now())

  habitLogs        HabitLog[]

  @@unique([userId, date])
  @@index([weeklyLogId])
}

model HabitLog {
  id         String     @id @default(cuid())
  dailyLogId String
  habitId    String
  value      Float?
  completed  Boolean?

  dailyLog   DailyLog   @relation(fields: [dailyLogId], references: [id])
  habit      Habit      @relation(fields: [habitId], references: [id])

  @@unique([dailyLogId, habitId])
  @@index([habitId])
}

model Modifier {
  id        String   @id @default(cuid())
  userId    String
  weeklyLogId String

  user      User     @relation(fields: [userId], references: [id])
  weeklyLog WeeklyLog @relation(fields: [weeklyLogId], references: [id])

  label     String
  value     Float
  createdAt DateTime @default(now())

  @@index([weeklyLogId])
}

model WeeklyScore {
  id          String   @id @default(cuid())
  userId      String
  weeklyLogId String   @unique

  user        User     @relation(fields: [userId], references: [id])
  weeklyLog   WeeklyLog @relation(fields: [weeklyLogId], references: [id])

  habitScore  Float
  modifierSum Float
  finalScore  Float
  breakdown   Json
  createdAt   DateTime @default(now())
}
