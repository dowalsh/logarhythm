generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  createdAt      DateTime        @default(now())
  dailyLogs      DailyLog[]
  habits         Habit[]
  modifiers      Modifier[]
  scoringSystems ScoringSystem[]
  WeeklyLog      WeeklyLog[]
}

model Habit {
  id             String        @id @default(cuid())
  userId         String
  name           String
  description    String?
  createdAt      DateTime      @default(now())
  habitType      HabitType     @default(BOOLEAN)
  user           User          @relation(fields: [userId], references: [id])
  habitLogs      HabitLog[]
  scoringConfigs ScoredHabit[]
}

model ScoringSystem {
  id        String        @id @default(cuid())
  userId    String
  name      String
  isActive  Boolean       @default(true)
  createdAt DateTime      @default(now())
  dailyLogs DailyLog[]
  habits    ScoredHabit[]
  user      User          @relation(fields: [userId], references: [id])
  WeeklyLog WeeklyLog[]
}

model ScoredHabit {
  id              String           @id @default(cuid())
  scoringSystemId String
  habitId         String
  scoringType     HabitScoringType
  weight          Int
  targetFrequency Int?
  habit           Habit            @relation(fields: [habitId], references: [id])
  scoringSystem   ScoringSystem    @relation(fields: [scoringSystemId], references: [id])

  @@unique([scoringSystemId, habitId])
}

model DailyLog {
  id              String        @id @default(cuid())
  userId          String
  date            String
  notes           String?
  createdAt       DateTime      @default(now())
  scoringSystemId String
  weeklyLogId     String
  scoringSystem   ScoringSystem @relation(fields: [scoringSystemId], references: [id])
  user            User          @relation(fields: [userId], references: [id])
  weeklyLog       WeeklyLog     @relation(fields: [weeklyLogId], references: [id])
  habitLogs       HabitLog[]

  @@unique([userId, date])
  @@index([weeklyLogId])
}

model HabitLog {
  id         String   @id @default(cuid())
  dailyLogId String
  habitId    String
  value      Float?
  completed  Boolean?
  dailyLog   DailyLog @relation(fields: [dailyLogId], references: [id])
  habit      Habit    @relation(fields: [habitId], references: [id])

  @@unique([dailyLogId, habitId])
  @@index([habitId])
}

model Modifier {
  id          String    @id @default(cuid())
  userId      String
  label       String
  value       Float
  createdAt   DateTime  @default(now())
  weeklyLogId String
  user        User      @relation(fields: [userId], references: [id])
  weeklyLog   WeeklyLog @relation(fields: [weeklyLogId], references: [id])

  @@index([weeklyLogId])
}

model WeeklyLog {
  id              String        @id @default(cuid())
  userId          String
  startDate       String
  scoringSystemId String
  createdAt       DateTime      @default(now())
  dailyLogs       DailyLog[]
  modifiers       Modifier[]
  ScoringSystem   ScoringSystem @relation(fields: [scoringSystemId], references: [id], map: "Week_scoringSystemId_fkey")
  User            User          @relation(fields: [userId], references: [id], map: "Week_userId_fkey")

  score Float? @default(0)

  @@unique([userId, startDate], map: "Week_userId_startDate_key")
  @@index([startDate], map: "Week_startDate_idx")
}


enum HabitScoringType {
  LINEAR_POSITIVE_CAPPED
  LINEAR_NEGATIVE_CAPPED
  THRESHOLD_TARGET
  ONE_OFF_BONUS
}

enum HabitType {
  BOOLEAN
  NUMERIC
}
