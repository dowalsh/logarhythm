generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =========================
// ENUMS

enum HabitScoringType {
  LINEAR_POSITIVE_CAPPED
  LINEAR_NEGATIVE_CAPPED
  THRESHOLD_TARGET
  ONE_OFF_BONUS
}

enum HabitType {
  BOOLEAN
  NUMERIC
}

// =========================
// MODELS

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  createdAt    DateTime      @default(now())

  habits       Habit[]
  dailyLogs    DailyLog[]
  modifiers    Modifier[]
  weeklyScores WeeklyScore[]
}

model Habit {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  name            String
  description     String?
  unit            String?
  weight          Int              // consider renaming to importance
  targetFrequency Int
  habitType       HabitType        @default(BOOLEAN)
  scoringType     HabitScoringType @default(LINEAR_POSITIVE_CAPPED)
  createdAt       DateTime         @default(now())

  habitLogs       HabitLog[]
}

model DailyLog {
  id         String      @id @default(cuid())
  userId     String
  user       User        @relation(fields: [userId], references: [id])
  date       DateTime
  notes      String?     // formerly from DailyEntry
  createdAt  DateTime    @default(now())

  habitLogs  HabitLog[]

  @@unique([userId, date])
}

model HabitLog {
  id         String     @id @default(cuid())
  dailyLogId String
  habitId    String
  value      Float?
  completed  Boolean?

  dailyLog   DailyLog   @relation(fields: [dailyLogId], references: [id])
  habit      Habit      @relation(fields: [habitId], references: [id])

  @@unique([dailyLogId, habitId])
}

model Modifier {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  weekStart DateTime
  label     String
  value     Float
  createdAt DateTime @default(now())
}

model WeeklyScore {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  weekStart   DateTime
  habitScore  Float
  modifierSum Float
  finalScore  Float
  breakdown   Json
  createdAt   DateTime @default(now())

  @@unique([userId, weekStart])
}
